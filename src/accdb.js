import { v4 as uuidv4 } from 'uuid';

var db = openDatabase('Accountdb', '1.0', 'db for p2p accounting app', 2 * 1024 * 1024);

function initTables() {
   db.transaction(function (tx) {
      tx.executeSql('CREATE TABLE IF NOT EXISTS chartOfAccount (id INTEGER PRIMARY KEY, accountCode UNIQE VARCHAR, accountName VARCHAR, accountType VARCHAR, isHeader BOOLEAN DEFAULT FALSE, headerAccountCode VARCHAR,  headerAccountName VARCHAR, balance NUMBER, createdBy VARCHAR, createdOn DATE)');

    tx.executeSql('CREATE TABLE IF NOT EXISTS journalDefinition (id INTEGER PRIMARY KEY, journalguid VARCHAR, approvedBy VARCHAR, approvedOn VARCHAR, autoGenerated BOOLEAN DEFAULT FALSE, canAddMoreItems BOOLEAN DEFAULT FALSE, canRemoveMoreItems BOOLEAN DEFAULT FALSE, createdBy VARCHAR, createdOn DATE, dateOfMonth VARCHAR, journalDescription VARCHAR, remark VARCHAR, transactionDate DATE, transactionRef VARCHAR)'); 

      tx.executeSql('CREATE TABLE IF NOT EXISTS journalDefinitionDetails (id INTEGER PRIMARY KEY, journalDefinationId NUMBER, parentguid VARCHAR, accountCode VARCHAR, amount NUMBER, canChangeAccountCode BOOLEAN DEFAULT FALSE, canChangeAmount BOOLEAN DEFAULT FALSE, canChangeIsCredited BOOLEAN DEFAULT FALSE, compulsory BOOLEAN DEFAULT FALSE, isCredited BOOLEAN DEFAULT FALSE, sn VARCHAR)');

   })
}

//  export function savechartofaccount(datatosave) {
var savechartofaccount = function (datatosave, callback)
 {
   initTables()

   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount where accountCode =? and accountName =? and accountType =? and isHeader =? `, [datatosave.accountCode , datatosave.accountName, datatosave.accountType, datatosave.isHeader], function (tx, re) {
         if (re.rows.length > 0) {
            callback('duplicate')   
         }
      }
      );
   });

   db.transaction(function (tx) 
   {
        tx.executeSql('INSERT INTO chartOfAccount(accountCode, accountName, accountType, isHeader, headerAccountCode, headerAccountName, balance, createdBy, createdOn) VALUES (?,?,?,?,?,?,?,?,?)', [datatosave.accountCode, datatosave.accountName, datatosave.accountType, datatosave.isHeader, datatosave.headerAccountCode, datatosave.headerAccountName, datatosave.balance, datatosave.createdBy, datatosave.createdOn], function (tx, results) {
         console.log(results);
         callback('success')
        
      }, function(e, r){
        callback('error:'+ e.message)
      }
      );
   });
}

const editChartOfAccount = function (id, datatoedit, callback) {
   db.transaction(function (tx) {
      tx.executeSql('update chartOfAccount set accountCode =?, accountName =?, accountType =?, isHeader =?, headerAccountCode =?,  headerAccountName =?, balance =? where id=?', [datatoedit.accountCode, datatoedit.accountName, datatoedit.accountType, datatoedit.isHeader, datatoedit.headerAccountCode, datatoedit.headerAccountName, datatoedit.balance, id], function (tx, results) {
         console.log(results);
         callback('success')
        
      }, function(e, r){
        callback('error:'+ e.message)
      });
   });

   // var result = [];
   // db.transaction(function (tx) {
   //    tx.executeSql(`Select * from chartOfAccount where id = ${id}`, [], function (tx, results) {
   //       console.log("r" ,results.rows);
   //       callback(results.rows)        
   //    }, function (e, r) {
   //      console.log({e});
   //      callback('error:'+ e.message)
   //   }   );
   // });
}


const getallchartofaccount = function (callback) {
   var result = [];
   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
        console.log({e});
        callback('error:'+ e.message)
     });
   });
}

const getallchartofaccountwithoutheader = function (callback) {
   var result = [];
   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount where isHeader = false`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
        console.log({e});
        callback('error:'+ e.message)
     }  );
   });
}

const getallchartofaccountIsheader = function (callback) {
   var result = [];
   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount where isHeader = true`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
        console.log({e});
        callback('error:'+ e.message)
     }  );
   });
}

const getchatofaccountbyId = function (id, callback) {
  
   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount where id = ${id}`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
      //   console.log({e});
        callback('error:'+ e.message)
     }   
      );
   });
}


const getchatofaccountbyIsHeaderandHeadacc = function (callback) {
  
   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount where isHeader = true and headerAccountName = ${''}`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
      //   console.log({e});
        callback('error:'+ e.message)
     }   
      );
   });
}


const getchatofaccountbycode = function (accCode, callback) {
  
   db.transaction(function (tx) {
      tx.executeSql(`Select * from chartOfAccount where accountCode = ${accCode}`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
      //   console.log({e});
        callback('error:'+ e.message)
     }   
      );
   });
}


  const savejournalDefinition = function(datatosave, callback){
      let parent;
      
        initTables()
        db.transaction(function(tx) {
            tx.executeSql('INSERT INTO journalDefinition(journalguid, approvedBy, approvedOn, autoGenerated, canAddMoreItems, canRemoveMoreItems, createdBy, createdOn, dateOfMonth, journalDescription, remark, transactionDate, transactionRef) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)',[datatosave.journalguid, datatosave.approvedBy, datatosave.approvedOn, datatosave.autoGenerated, datatosave.canAddMoreItems, datatosave.canRemoveMoreItems, datatosave.createdBy, datatosave.createdOn, datatosave.dateOfMonth, datatosave.journalDescription, datatosave.remark, datatosave.transactionDate, datatosave.transactionRef], function (tx, results) {
                console.log("r" ,results);
                parent = results.insertId
                callback('success')
               
             }, function (e, r) {
               console.log({e});
               callback('error:'+ e.message)
            });

            for (const item of datatosave.journalDefinitionDetails){
            tx.executeSql('INSERT INTO journalDefinitionDetails(parentguid, journalDefinationId, accountCode, amount, canChangeAccountCode, canChangeAmount, canChangeIsCredited, compulsory, isCredited, sn) VALUES (?,?,?,?,?,?,?,?,?,?)',[item.parentguid, parent, item.accountCode, parseInt(item.amount), item.canChangeAccountCode, item.canChangeAmount, item.canChangeIsCredited, item.compulsory, item.isCredited, item.sn], function (tx, results) {
               console.log({results});
                callback('success')              
            }, function (e, r) {
               console.log({e});
               callback('error:'+ e.message)
            })
         }
          });

        
   
        
       }

 const editjournalDefinition = function(id, datatosave, callback){
   db.transaction(function (tx) {
      tx.executeSql('update journalDefinition set journalguid =?, approvedBy =?, approvedOn =?, autoGenerated =?, canAddMoreItems =?, canRemoveMoreItems =?, createdBy =?, createdOn =?, dateOfMonth =?, journalDescription =?, remark =?, transactionDate =?, transactionRef =? where id=?', [datatosave.journalguid, datatosave.approvedBy, datatosave.approvedOn, datatosave.autoGenerated, datatosave.canAddMoreItems, datatosave.canRemoveMoreItems, datatosave.createdBy, datatosave.createdOn, datatosave.dateOfMonth, datatosave.journalDescription, datatosave.remark, datatosave.transactionDate, datatosave.transactionRef, id], function (tx, results) {
         console.log(results);
         callback('success')
        
      }, function(e, r){
        callback('error:'+ e.message)
      });

    
      for (const item of datatosave.journalDefinitionDetails) {
         tx.executeSql('update journalDefinitionDetails set parentguid =?, journalDefinationId =?, accountCode =?, amount =?, canChangeAccountCode =?, canChangeAmount =?, canChangeIsCredited =?, compulsory =?, isCredited =?, sn =? where id=?', [item.parentguid, item.journalDefinationId, item.accountCode, parseInt(item.amount), item.canChangeAccountCode, item.canChangeAmount, item.canChangeIsCredited, item.compulsory, item.isCredited, item.sn, id], function (tx, results) {
            console.log(results);
            callback('success')
           
         }, function(e, r){
           callback('error:'+ e.message)
         });
      }


   });
 }

 const getjuornaldiscriptionbyid = function(guid, callback){
   db.transaction(function (tx) {
      tx.executeSql(`Select * from journalDefinition where journalguid = ${guid}`, [], function (tx, results) {
         console.log("r" ,results.rows[0]);
         callback(results.rows)        
      }, function (e, r) {
      //   console.log({e});
        callback('error:'+ e.message)
     }   
      );
   });
 }

 const getalljuornaldiscription = function (callback) {
   var result = [];
   db.transaction(function (tx) {
      tx.executeSql(`Select * from journalDefinition`, [], function (tx, results) {
         console.log("r" ,results.rows);
         callback(results.rows)        
      }, function (e, r) {
        console.log({e});
        callback('error:'+ e.message)
     }  );
   });
}




   

  const dbData = {
    savechartofaccount, 
    editChartOfAccount,
    getallchartofaccount,
    getchatofaccountbyId,
    savejournalDefinition,
    getallchartofaccountwithoutheader,
    editjournalDefinition,
    getjuornaldiscriptionbyid,
    getchatofaccountbyIsHeaderandHeadacc,
    getchatofaccountbycode,
    getalljuornaldiscription,
    getallchartofaccountIsheader
  }
  export default dbData;