import moment from 'moment';
import React, { useEffect, useState } from 'react'
import { useForm } from 'react-hook-form';
import { useParams } from 'react-router';
import dbData from '../../accdb';
import Backbutton from '../../components/backbutton';
import { source } from '../../utils/enum';
import { formatter2 } from '../../utils/formatter';
import { journals } from '../../utils/journaldemodata';


export default function EditJournal() {
    const id = useParams()
    const { register, handleSubmit, formState: { errors }, reset, watch, trigger, control, setValue } = useForm({
        mode: "onChange",
        reValidateMode: 'onChange'
    });
    const { register: register2, formState: { errors: errors2 }, setValue: setValue2, reset: reset2, getValues: getValues2 } = useForm({
        mode: "onChange",
        reValidateMode: 'onChange'
    });

    const [journal, setJournal] = useState({})
    const [journalDetails, setJournalDetails] = useState([])
    const [addJournalDetails, setAddJournalDetails] = useState({
        transactionNarration: "",
        accountCode: "",
        debit: "",
        credit: ""
    })

    useEffect(() => {
        const response = dbData.getjuornalbyid((id.id), setJournal)
        setJournalDetails(journal?.journalsDetails)
        console.log(journal)
    }, []);


    const handleOnChange = (e) => {
        let { name, value, checked } = e.target
        setJournal({
            ...journal,
            [name]: value === 'on' ? checked : value ?? JSON.parse(value),
        })

    }
    console.log({ journal })

    const handleOnChange2 = (e) => {
        let { name, value } = e.target
        if (name === "debit" || name === "credit") {
            if (value === "") {
                if (name === "debit") {
                    setValue2("debit", value)
                } else {
                    setValue2("credit", value)
                }
            }
            else {
                const num = parseFloat(value.replace(/,/g, ''));
                const numm = (formatter2.format((num)))
                if (name === "debit") {
                    setValue2("debit", numm === "NaN" ? 0 : numm)
                } else {
                    setValue2("credit", numm === "NaN" ? 0 : numm)
                }
            }
        }


        setAddJournalDetails({
            ...addJournalDetails,
            [name]: value ?? JSON.parse(value),
        })
    }

    const addToJournalDetails = () => {
        const amo = getValues2("debit")
        const amo2 = getValues2("credit")
        const debit = parseFloat(amo ? amo.replace(/,/g, '') : 0);
        const credit = parseFloat(amo2 ? amo2.replace(/,/g, '') : 0);
        const journ = {
            journalId: journal.id,
            transactionNarration: addJournalDetails.transactionNarration,
            accountCode: addJournalDetails.accountCode,
            credit: credit,
            debit: debit
        }
        setJournalDetails([...journalDetails, journ]);
        reset2()

    }

    const deleteJournal = (journal) => {
        let exists = journalDetails.find(x => x.accountCode === journal.accountCode);

        if (exists) {
            const filteredJournals = journalDetails.filter(function (item) {
                return item.accountCode !== journal.accountCode;
            })
            setJournalDetails([...filteredJournals]);
        }
    }

    const editJournal = (journal) => {
        setValue2("transactionNarration", journal.transactionNarration)
        setValue2("accountCode", journal.accountCode)
        setValue2("credit", formatter2.format(journal.credit))
        setValue2("debit", formatter2.format(journal.debit))
        setAddJournalDetails(journal)
        const filteredJournals = journalDetails.filter(function (item) {
            return item.accountCode !== journal.accountCode;
    })
        setJournalDetails([...filteredJournals]);

    }

    const submitJournal = () => {
        const payload = {
            id: journal.id,
            transactionRef: journal.transactionRef,
            transactionDate: journal.transactionDate,
            narration: journal.narration,
            journalDescription: journal.journalDescription,
            source: journal.source,
            autoGenerated: journal.autoGenerated,
            approvedOn: new Date(),
            approvedBy: "Stephanie",
            journalDetails: journalDetails
        }
        console.log({payload})
    }
    return (
        <>
            <div className="content-wrapper mt-5">
                <div className="card">
                    <div className="card-body">
                        <div className="d-flex align-items-center justify-content-between">
                            <div className="d-flex align-items-center justify-content-center flex-column">
                                {/* <img src="assets/images/logo-mini-1.png" /> */}
                                {/* <span className="h6 d-none d-md-block">NETOP CONSULTING</span> */}
                            </div>
                            <span className="card-title">JOURNAL</span>
                            <span className="mr-5 d-none d-md-block"></span>
                        </div>
                        <div className="d-flex align-items-right justify-content-between">
                        <Backbutton/>
                        <button type="button" onClick={submitJournal}
                        class="btn btn-primary btn-sm btn-icon-text text-white d-flex float-right">
                            <i className="ti-save mr-1" title="Submit"></i>
                            <span className="d-none d-md-block">SUBMIT</span>
                        </button>

                        </div>

                        <form className="row newReceiptNote mt-5">
                            <div className="form-group col-md-3">
                                <label htmlFor="transactionRef">Transaction Ref
                                    {errors.transactionRef &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="transactionRef"
                                    name="transactionRef"
                                    {...register("transactionRef", { required: true, onChange: (e) => { handleOnChange(e) } })}
                                    placeholder="Transaction Ref" />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="transactionDate">Transaction Date</label>
                                {errors.transactionDate && (
                                    <span className="text-danger"> required</span>
                                )}
                                <input
                                    type="date"
                                    className="form-control form-control-sm"
                                    id="transactionDate"
                                    name="transactionDate"
                                    placeholder="Expiry Date"
                                    {...register("transactionDate", {
                                        required: true,
                                        onChange: (e) => { handleOnChange(e) }
                                    })}
                                    min={moment().format("YYYY-MM-DD")}
                                />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="narration">Narration
                                    {errors.narration &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="narration"
                                    name="narration"
                                    {...register("narration", { required: true, onChange: (e) => { handleOnChange(e) } })}
                                    placeholder="Narration" />
                            </div>

                            <div className="form-group col-md-3">
                                <label htmlFor="source">Source
                                    {errors.source &&
                                        <span className="text-danger font-weight-bold"> required</span>}
                                </label>
                                <select className="form-control form-control-sm"
                                    id="source"
                                    name="source"
                                    {...register("source", { required: true, onChange: (e) => { handleOnChange(e) } })}
                                >
                                    <option> Select Source </option>
                                    {source.map((source) => (
                                        <option key={source.id} >{source.name}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="journalDescription">Journal Description
                                    {errors.journalDescription &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="journalDescription"
                                    name="journalDescription"
                                    {...register("journalDescription", { required: true, onChange: (e) => { handleOnChange(e) } })}
                                    placeholder="Journal Description" />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="autoGenerated">Auto Generated</label>
                                <div className="custom-control custom-switch">
                                    <input type="checkbox"
                                        className="custom-control-input"
                                        id="autoGenerated"
                                        name="autoGenerated"
                                        {...register("autoGenerated", { onChange: (e) => handleOnChange(e) })}
                                    />
                                    <label className="custom-control-label" htmlFor="autoGenerated"></label>
                                </div>
                            </div>

                        </form>
                    </div>
                </div>

                <div className="card mt-2">
                    <div className="card-body">
                        <form className="row newReceiptNote ">
                            <div className="form-group col-md-3">
                                <label htmlFor="transactionNarration">Transaction Narration
                                    {errors2.transactionNarration &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="transactionNarration"
                                    name="transactionNarration"
                                    {...register2("transactionNarration", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Transaction Narration" />
                            </div>

                            <div className="form-group col-md-3">
                                <label htmlFor="accountCode">Account Code
                                    {errors2.accountCode &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="accountCode"
                                    name="accountCode"
                                    {...register2("accountCode", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Account Code" />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="debit">Debit
                                    {errors2.debit &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="debit"
                                    name="debit"
                                    {...register2("debit", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Debit" />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="credit">Credit
                                    {errors2.credit &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="credit"
                                    name="credit"
                                    {...register2("credit", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Credit" />
                            </div>
                        </form>
                        <button
                            type="submit"
                            onClick={() => addToJournalDetails()}
                            class="btn btn-primary btn-sm btn-icon-text text-white d-flex float-right"
                        // disabled={loading ? true : false}
                        >
                            <i className=" mdi mdi-plus mr-1" title="Submit"></i>
                            ADD
                        </button>

                    </div>
                </div>

                <div className="row mt-1">
                    <div className="col-md-12 grid-margin stretch-card">
                        <div className="card">
                            <div className="">
                                <div className='table-responsive'>
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>
                                                    S/N
                                                </th>
                                                <th>
                                                    TRANSACTION NARRATION
                                                </th>
                                                <th>
                                                    ACCOUNT CODE
                                                </th>
                                                <th>
                                                    DEBIT
                                                </th>
                                                <th>
                                                    CREDIT
                                                </th>
                                                <th>
                                                    ACTION
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {journalDetails &&
                                                journalDetails?.map((journal, index) =>
                                                    <tr className="py-0">
                                                        <td >
                                                            {index + 1}
                                                        </td>
                                                        <td>
                                                            {journal.transactionNarration}
                                                        </td>
                                                        <td>
                                                            {journal.accountCode}
                                                        </td>
                                                        <td>
                                                            {formatter2.format(journal.debit)}
                                                        </td>
                                                        <td>
                                                            {formatter2.format(journal.credit)}
                                                        </td>
                                                        <td>
                                                            <div className="d-flex justify-content-between">
                                                                {<i className="ti-pencil text-warning mr-3" onClick={() => editJournal(journal)} title="Edit" />}
                                                                <i className="ti-trash text-danger" onClick={() => deleteJournal(journal)} title="Delete" />
                                                            </div>
                                                        </td>
                                                    </tr>
                                                )}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </>
    )
}
