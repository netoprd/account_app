import moment from 'moment';
import React, { useState } from 'react'
import { useForm } from 'react-hook-form';
import { useNavigate } from 'react-router';
import dbData from '../../accdb';
import Backbutton from '../../components/backbutton';
import { source } from '../../utils/enum';
import { formatter2 } from '../../utils/formatter';
import { journalDefinition } from '../../utils/journaldefinationdemo';


export default function CreateJournal() {
    const history = useNavigate()
    const { register, handleSubmit, formState: { errors }, reset, watch, trigger, control, setValue } = useForm({
        mode: "onChange",
        reValidateMode: 'onChange'
    });
    const { register: register2, formState: { errors: errors2 }, setValue: setValue2, reset: reset2, getValues: getValues2 } = useForm({
        mode: "onChange",
        reValidateMode: 'onChange'
    });

    const [journal, setJournal] = useState({
        id: 2,
        transactionRef: "",
        transactionDate: "",
        narration: "",
        journalDescription: "",
        source: "",
        autoGenerated: false
    })
    const journalDetailsDef = []
    const [journalDefinition, setJournalDefinition] = useState([])
    const [journalDetails, setJournalDetails] = useState([])
    const [addJournalDetails, setAddJournalDetails] = useState({
        transactionNarration: "",
        accountCode: "",
        debit: "",
        credit: ""
    })
    const [cannotAdd, setCannotAdd] = useState(false)
    const [cannotRemove, setCannotRemove] = useState(false)
    const [changeAMountCode, setchangeAMountCode] = useState(false)
    const [changebalance, setchangebalance] = useState(false)
    const [journDef, setJournDef] = useState({})

    const journaldefin = () => {
        const response = dbData.getalljuornaldiscription(setJournalDefinition)
    }
    const selectJournalDoc = (id) => {
        const response = dbData.getjuornaldiscriptionbyid(id, setJournDef)
        setValue("transactionRef", journDef.transactionRef)
        setValue("transactionDate", moment(journDef.transactionDate).format("YYYY-MM-DD"))
        setValue("journalDescription", journDef.journalDescription)
        setValue("autoGenerated", journDef.autoGenerated === "false" ? false : true)
        setValue("narration", "")
        setJournalDetails([])
        if (journDef.canAddMoreItems === "false") {
            setCannotAdd(true)
        }
        if (journDef.canRemoveMoreItems === "false") {
            setCannotRemove(true)
        }

        setJournal(journDef)
        // setJournalDetails([...journalDetails, ...journDef?.journalDefinitionDetails])
    }
    console.log({ journal })
    const handleOnChange = (e) => {
        let { name, value, checked } = e.target
        setJournal({
            ...journal,
            [name]: value === 'on' ? checked : value ?? JSON.parse(value),
        })
        if (name === "narration") {
            for (const c of (journal?.journalDefinitionDetails)) {
                let obj = {
                    transactionNarration: value,
                    accountCode: c.accountCode,
                    debit: c.isCredited ? 0 : c.amount,
                    credit: c.isCredited ? c.amount : 0,
                    canChangeAccountCode: c.canChangeAccountCode,
                    canChangeAmount: c.canChangeAmount,
                    canChangeIsCredited: c.canChangeIsCredited,
                    compulsory: c.compulsory,
                    isCredited: c.isCredited,
                    parentguid: c.parentguid,
                    sn: c.sn,
                    journalDefinitionId: c.id
                }
                journalDetailsDef.push(obj);
                obj = {};
            }
            setJournalDetails(journalDetailsDef)

        }

    }
    console.log({ journalDetails })

    const handleOnChange2 = (e) => {
        let { name, value } = e.target
        if (name === "debit" || name === "credit") {
            if (value === "") {
                if (name === "debit") {
                    setValue2("debit", value)
                } else {
                    setValue2("credit", value)
                }
            }
            else {
                const num = parseFloat(value.replace(/,/g, ''));
                const numm = (formatter2.format((num)))
                if (name === "debit") {
                    setValue2("debit", numm === "NaN" ? 0 : numm)
                } else {
                    setValue2("credit", numm === "NaN" ? 0 : numm)
                }
            }
        }


        setAddJournalDetails({
            ...addJournalDetails,
            [name]: value ?? JSON.parse(value),

        })
    }

    const addToJournalDetails = () => {
        const amo = getValues2("debit")
        const amo2 = getValues2("credit")
        const debit = parseFloat(amo ? amo.replace(/,/g, '') : 0);
        const credit = parseFloat(amo2 ? amo2.replace(/,/g, '') : 0);
        const journ = {
            journalDefinitionId: addJournalDetails.journalDefinitionId,
            parentguid: journal.journalguid,
            transactionNarration: addJournalDetails.transactionNarration,
            accountCode: addJournalDetails.accountCode,
            credit: credit,
            debit: debit,
            sn: addJournalDetails.sn ? addJournalDetails.sn : journalDetails.length + 1,
        }
        setJournalDetails([...journalDetails, journ]);
        reset2()
        if (journDef.canAddMoreItems === "true") {
            setCannotAdd(true)
        }
        setchangeAMountCode(false)
        setchangebalance(false)
    }

    const deleteJournal = (journal) => {
        let exists = journalDetails.find(x => x.accountCode === journal.accountCode);

        if (exists) {
            const filteredJournals = journalDetails.filter(function (item) {
                return item.accountCode !== journal.accountCode;
            })
            setJournalDetails([...filteredJournals]);
        }
    }

    const editJournal = (journal) => {
        if (journDef.canAddMoreItems === "true") {
            setCannotAdd(false)
        }
        setValue2("transactionNarration", journal.transactionNarration)
        setValue2("accountCode", journal.accountCode)
        setValue2("credit", formatter2.format(journal.credit))
        setValue2("debit", formatter2.format(journal.debit))
        setAddJournalDetails(journal)
        if (journal.canChangeAmount === "false") {
            setchangeAMountCode(true)
        }
        if (journal.canChangeAmount === "false" || journal.canChangeAccountCode === "false") {
            setchangebalance(true)
        }
        const filteredJournals = journalDetails.filter(function (item) {
            return item.accountCode !== journal.accountCode;
        })
        setJournalDetails([...filteredJournals]);

    }

    const submitJournal = () => {
        const jour = []
        for (const c of (journalDetails)) {
            let obj = {
                transactionNarration: c.transactionNarration,
                accountCode: c.accountCode,
                debit: c.debit,
                credit: c.credit,
                parentguid: c.parentguid,
                sn: c.sn,
                journalDefinitionId: c.journalDefinitionId
            }
            jour.push(obj);
            obj = {};
        }
        setJournalDetails(journalDetailsDef)


        const payload = {
            journalguid: journal.journalguid,
            transactionRef: journal.transactionRef,
            transactionDate: journal.transactionDate,
            narration: journal.narration,
            journalDescription: journal.journalDescription,
            autoGenerated: journal.autoGenerated,
            approvedOn: new Date(),
            approvedBy: "",
            journalDetails: jour
        }
        console.log({ payload })
    }
    return (
        <>
            <div className="content-wrapper mt-5">
                <div className="card">
                    <div className="card-body">
                        <div className="d-flex align-items-center justify-content-between">
                            <div className="d-flex align-items-center justify-content-center flex-column">
                                {/* <img src="assets/images/logo-mini-1.png" /> */}
                                {/* <span className="h6 d-none d-md-block">NETOP CONSULTING</span> */}
                            </div>
                            <span className="card-title">JOURNAL</span>
                            <span className="mr-5 d-none d-md-block"></span>
                        </div>
                        <div className="d-flex align-items-right justify-content-between">
                            <Backbutton />
                            <button type="button" onClick={submitJournal}
                                class="btn btn-primary btn-sm btn-icon-text text-white d-flex float-right">
                                <i className="ti-save mr-1" title="Submit"></i>
                                <span className="d-none d-md-block">SUBMIT</span>
                            </button>

                        </div>

                        <form className="row newReceiptNote mt-5">
                            <div className="form-group col-md-3">
                                <label htmlFor="transactionRef">Transaction Ref<span className='text-danger'>*</span>
                                    {errors.transactionRef &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <div className='input-group'>
                                    <input type="text" className="form-control"
                                        id="transactionRef"
                                        name="transactionRef"
                                        onChange={(e) => handleOnChange(e)}
                                        {...register("transactionRef")}
                                        readOnly
                                        placeholder="Transaction Ref"
                                    />
                                    <div
                                        style={{ cursor: 'pointer' }}
                                        class="input-group-prepend"
                                        data-toggle="modal"
                                        data-target="#participantsModal">
                                        <span
                                            className="input-group-text bg-primary text-light"
                                            id="inputGroup-sizing-default"
                                            onClick={journaldefin}
                                        >
                                            <i
                                                className={
                                                    "ti-plus"
                                                }
                                            ></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="transactionDate">Transaction Date</label>
                                {errors.transactionDate && (
                                    <span className="text-danger"> required</span>
                                )}
                                <input
                                    type="date"
                                    className="form-control form-control-sm"
                                    id="transactionDate"
                                    name="transactionDate"
                                    placeholder="Expiry Date"
                                    {...register("transactionDate", {
                                        required: true,
                                        onChange: (e) => { handleOnChange(e) }
                                    })}
                                    min={moment().format("YYYY-MM-DD")}
                                    disabled
                                />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="narration">Narration
                                    {errors.narration &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="narration"
                                    name="narration"
                                    {...register("narration", { required: true, onChange: (e) => { handleOnChange(e) } })}
                                    placeholder="Narration" />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="journalDescription">Journal Description
                                    {errors.journalDescription &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="journalDescription"
                                    name="journalDescription"
                                    {...register("journalDescription", { required: true, onChange: (e) => { handleOnChange(e) } })}
                                    placeholder="Journal Description"
                                    disabled />
                            </div>
                            <div className="form-group col-md-3">
                                <label htmlFor="autoGenerated">Auto Generated</label>
                                <div className="custom-control custom-switch">
                                    <input type="checkbox"
                                        className="custom-control-input"
                                        id="autoGenerated"
                                        name="autoGenerated"
                                        {...register("autoGenerated", { onChange: (e) => handleOnChange(e) })}
                                        disabled
                                    />
                                    <label className="custom-control-label" htmlFor="autoGenerated"></label>
                                </div>
                            </div>

                        </form>
                    </div>
                </div>

                {cannotAdd && <div className="card mt-2">
                    <div className="card-body">
                        <form className="row newReceiptNote ">
                            <div className="form-group col-md-3">
                                <label htmlFor="transactionNarration">Transaction Narration
                                    {errors2.transactionNarration &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="transactionNarration"
                                    name="transactionNarration"
                                    {...register2("transactionNarration", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Transaction Narration" />
                            </div>

                            {<div className="form-group col-md-3">
                                <label htmlFor="accountCode">Account Code
                                    {errors2.accountCode &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="accountCode"
                                    name="accountCode"
                                    {...register2("accountCode", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Account Code"
                                    disabled={changeAMountCode ? true : false} />
                            </div>}
                            {<div className="form-group col-md-3">
                                <label htmlFor="debit">Debit
                                    {errors2.debit &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="debit"
                                    name="debit"
                                    {...register2("debit", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Debit"
                                    disabled={changebalance ? true : false} />
                            </div>}
                            {<div className="form-group col-md-3">
                                <label htmlFor="credit">Credit
                                    {errors2.credit &&
                                        <span className="text-danger font-weight-bold"> required</span>
                                    }
                                </label>
                                <input type="text" className="form-control form-control-sm"
                                    id="credit"
                                    name="credit"
                                    {...register2("credit", { required: true, onChange: (e) => { handleOnChange2(e) } })}
                                    placeholder="Credit"
                                    disabled={changebalance ? true : false} />
                            </div>}
                        </form>
                        <button
                            type="submit"
                            onClick={() => addToJournalDetails()}
                            class="btn btn-primary btn-sm btn-icon-text text-white d-flex float-right"
                        // disabled={loading ? true : false}
                        >
                            <i className=" mdi mdi-plus mr-1" title="Submit"></i>
                            ADD
                        </button>

                    </div>
                </div>}

                <div className="row mt-1">
                    <div className="col-md-12 grid-margin stretch-card">
                        <div className="card">
                            <div className="">
                                <div className='table-responsive'>
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>
                                                    ACTION
                                                </th>

                                                <th>
                                                    S/N
                                                </th>
                                                <th>
                                                    TRANSACTION NARRATION
                                                </th>
                                                <th>
                                                    ACCOUNT CODE
                                                </th>
                                                <th>
                                                    DEBIT
                                                </th>
                                                <th>
                                                    CREDIT
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {journalDetails &&
                                                journalDetails?.map((journal, index) =>
                                                    <tr className="py-0">                                                                                                               <td>
                                                        <div className="d-flex justify-content-between">
                                                            {<i className="ti-pencil text-warning mr-3" onClick={() => editJournal(journal)} title="Edit" />}
                                                            {cannotRemove && <i className="ti-trash text-danger" onClick={() => deleteJournal(journal)} title="Delete" />}
                                                        </div>
                                                    </td>

                                                        <td >
                                                            {index + 1}
                                                        </td>
                                                        <td>
                                                            {journal.transactionNarration}
                                                        </td>
                                                        <td>
                                                            {journal.accountCode}
                                                        </td>
                                                        <td>
                                                            {formatter2.format(journal.debit)}
                                                        </td>
                                                        <td>
                                                            {formatter2.format(journal.credit)}
                                                        </td>
                                                    </tr>
                                                )}
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>



            {/* ............................................................................................................................ */}
            <div class="modal fade" id="participantsModal" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
                <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
                    <div class="modal-content">
                        <div class="modal-header text-center">
                            <h3 class="font-weight-bold text-center">SELECT JOURNAL DEFINITION</h3>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div className="row">
                                <div className="form-group col-md-6 mx-auto">
                                    <div className="input-group">
                                        <input type="text" className="form-control form-control-sm" placeholder="Search Journal Definition"
                                            // onChange={e => searchOrder(e.target.value)}
                                            aria-label="Recipient's username" />
                                    </div>
                                </div>
                            </div>
                            <div className="row">
                                <div className="col-md-12 grid-margin stretch-card">
                                    <div className="card">
                                        <div className="card-body">
                                            <div className="table-responsive">
                                                <table className="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>ACTION</th>
                                                            <th>S/N</th>
                                                            <th>TRANSACTION REF</th>
                                                            <th>TRANSACTION DATE</th>
                                                            <th>CREATED BY</th>
                                                            <th>REMARK</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        {
                                                            journalDefinition && journalDefinition.length > 0 &&
                                                            Object.values(journalDefinition)?.map((pro, index) => <tr key={pro.id}>
                                                                <td>
                                                                    <button
                                                                        type="button"
                                                                        onClick={() => selectJournalDoc(pro?.journalguid)}
                                                                        class="btn btn-primary btn-sm btn-icon-text text-white d-flex"
                                                                        // disabled={loading ? true : false}
                                                                        data-toggle="modal"
                                                                        data-target="#participantsModal">
                                                                        SAVE
                                                                    </button>
                                                                </td>
                                                                <td>
                                                                    {index + 1}
                                                                </td>
                                                                <td>
                                                                    <span>{pro?.transactionRef}</span>
                                                                </td>
                                                                <td>
                                                                    <span> {moment(pro?.transactionDate).format('MMM D, YYYY')}</span>
                                                                </td>
                                                                <td>
                                                                    <span>{pro?.createdBy}</span>
                                                                </td>
                                                                <td>
                                                                    <span>{pro?.remark}</span>
                                                                </td>




                                                            </tr>)}
                                                    </tbody>
                                                </table>
                                            </div>
                                            {
                                                journalDefinition?.length === 0 &&
                                                <div className='row'>
                                                    <strong className='mx-auto mt-5 h3'>No Journal Definition Record</strong>
                                                </div>
                                            }
                                        </div>
                                        {/* {
                                        order.length !== 0 &&
                                        <Paginate
                                            limit={limito}
                                            setData={setOrder}
                                            apiToCall={api.Invoice.loadApprovedOrder}
                                            pageCount={pageCounto}
                                        />
                                    } */}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </>
    )
}
